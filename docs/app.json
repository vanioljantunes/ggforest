[{"name":"app.R","content":"library(dplyr, warn.conflicts = FALSE)\r\nlibrary(MetBrewer)\r\nlibrary(ggplot2)\r\nlibrary(shiny)\r\nlibrary(rhandsontable)\r\n\r\n# Define UI\r\nui <- fluidPage(\r\n  titlePanel(\"Editable Spreadsheet with Forest Plot\"),\r\n  fluidRow(\r\n    # Left column: Buttons and Editable Table\r\n    column(6,  # Half the width\r\n           actionButton(\"save\", \"Save Changes\"),\r\n           actionButton(\"reset\", \"Reset Table\"),\r\n           actionButton(\"run_code\", \"Run Code\"),\r\n           br(), br(),\r\n           rhandsontable::rHandsontableOutput(\"editableTable\")\r\n    ),\r\n    # Right column: Forest Plot Canvas\r\n    column(6,  # Half the width\r\n           h4(\"Forest Plot:\"),\r\n           shiny::plotOutput(\"resultCanvas\")  # Output area for the forest plot\r\n    )\r\n  )\r\n)\r\n\r\n# Define Server\r\nserver <- function(input, output, session) {\r\n  # Initialize dataset with predefined columns and 5 empty rows\r\n  initial_data <- base::data.frame(\r\n    Study = base::paste(\"Outcome\", 1:6),\r\n    Estimate = c(0.2, 0.5, 0.7, -0.3, -0.1, 0.4),\r\n    Lower_CI = c(0.1, 0.3, 0.5, -0.5, -0.3, 0.2),\r\n    Upper_CI = c(0.3, 0.7, 0.9, -0.1, 0.1, 0.6),\r\n    p_value = c(0.03, 0.01, 0.01, 0.04, 0.2, 0.04),\r\n    stringsAsFactors = FALSE\r\n  )\r\n  \r\n  # Reactive data storage\r\n  values <- shiny::reactiveValues(data = initial_data)\r\n  \r\n  # Render editable table\r\n  output$editableTable <- rhandsontable::renderRHandsontable({\r\n    rhandsontable::rhandsontable(values$data, rowHeaders = NULL)\r\n  })\r\n  \r\n  # Update data on table edit\r\n  shiny::observeEvent(input$editableTable, {\r\n    if (!base::is.null(input$editableTable)) {\r\n      values$data <- rhandsontable::hot_to_r(input$editableTable)\r\n    }\r\n  })\r\n  \r\n  # Save data (you can replace print with file-saving logic)\r\n  shiny::observeEvent(input$save, {\r\n    base::print(\"Saving data:\")\r\n    base::print(values$data)\r\n    # Example: utils::write.csv(values$data, \"output.csv\", row.names = FALSE)\r\n  })\r\n  \r\n  # Reset to initial table\r\n  shiny::observeEvent(input$reset, {\r\n    values$data <- initial_data\r\n  })\r\n  \r\n  # Display forest plot when \"Run Code\" is pressed\r\n  shiny::observeEvent(input$run_code, {\r\n    output$resultCanvas <- shiny::renderPlot({\r\n      # Prepare the plot dynamically using current table data\r\n      data <- dplyr::arrange(values$data, -Estimate) %>%\r\n        dplyr::mutate(Study = base::factor(Study, levels = Study))\r\n      \r\n      # Define MetBrewer palette\r\n      met_palette <- MetBrewer::met.brewer(\"Hokusai2\")\r\n      \r\n      # Calculate extra space for the X-axis dynamically\r\n      x_padding <- base::max(data$Upper_CI, na.rm = TRUE) * 0.3  # 30% extra space for annotations\r\n      x_limit <- c(base::min(data$Lower_CI, na.rm = TRUE), base::max(data$Upper_CI, na.rm = TRUE) + x_padding)\r\n      \r\n      # Generate the forest plot\r\n      plot <- ggplot2::ggplot(data, ggplot2::aes(x = Estimate, y = Study)) +\r\n        # Customized error bars\r\n        ggplot2::geom_errorbarh(\r\n          ggplot2::aes(xmin = Lower_CI, xmax = Upper_CI, color = Estimate),\r\n          height = 0.2,\r\n          size = 1\r\n        ) +\r\n        # Customized points\r\n        ggplot2::geom_point(\r\n          ggplot2::aes(fill = Estimate),\r\n          size = 4,\r\n          shape = 23,\r\n          color = \"black\",\r\n          stroke = 0.8\r\n        ) +\r\n        # Null hypothesis line\r\n        ggplot2::geom_vline(ggplot2::aes(xintercept = 0, linetype = \"Null hypothesis\"), \r\n                            color = met_palette[3], size = 1) +\r\n        # Gradient scale for points\r\n        ggplot2::scale_fill_gradientn(colors = met_palette, name = \"Effect Size\", guide = \"colorbar\") +\r\n        ggplot2::scale_color_gradientn(colors = met_palette, guide = \"none\") +\r\n        ggplot2::scale_linetype_manual(name = \"\", values = c(\"Null hypothesis\" = \"solid\")) +\r\n        # Add p_value annotations\r\n        ggplot2::geom_text(\r\n          ggplot2::aes(label = base::sprintf(\"p = %.2f\", p_value), x = base::max(Upper_CI) + x_padding / 4),\r\n          hjust = 0,\r\n          size = 4,\r\n          color = \"black\"\r\n        ) +\r\n        # Expand X-axis limits\r\n        ggplot2::scale_x_continuous(limits = x_limit, expand = c(0, 0)) +\r\n        # Custom theme\r\n        ggplot2::theme_minimal() +\r\n        ggplot2::theme(\r\n          plot.title = ggplot2::element_text(hjust = 0.5, size = 14),\r\n          axis.text.y = ggplot2::element_text(color = \"black\", size = 12),\r\n          axis.title.x = ggplot2::element_blank(),\r\n          axis.text.x = ggplot2::element_blank(),\r\n          axis.ticks.x = ggplot2::element_blank(),\r\n          legend.title = ggplot2::element_text(size = 10),\r\n          legend.text = ggplot2::element_text(size = 10),\r\n          legend.position = \"bottom\"\r\n        )\r\n      # Return the plot\r\n      base::print(plot)\r\n    })\r\n  })\r\n}\r\n\r\n# Run the application\r\nshiny::shinyApp(ui = ui, server = server)\r\n","type":"text"},{"name":"ggforest.Rproj","content":"Version: 1.0\r\n\r\nRestoreWorkspace: Default\r\nSaveWorkspace: Default\r\nAlwaysSaveHistory: Default\r\n\r\nEnableCodeIndexing: Yes\r\nUseSpacesForTab: Yes\r\nNumSpacesForTab: 2\r\nEncoding: UTF-8\r\n\r\nRnwWeave: Sweave\r\nLaTeX: pdfLaTeX\r\n","type":"text"},{"name":"initial_data.rds","content":"H4sIAAAAAAAABovgYmBgYGZgYWFkYGYFMhlYQ0PcdC2AYsIgDhALADEbAwsDJ5Dm9C8tSc7P\nTVUwRBcwQhcwRhcwQRcwRRcwA3L4QLbZn5wJArPsHzCAgf2zNDDYf9kYDPbvhMrfhNBwfTBx\nqDqY/v0wGiZ+Ek0fTBxqj/2bMyBwFm4PjH4MUQfXN29H4OtWuR32LVUP3deJVMPpJVAa5g8o\nn4GBhQmojxHqcda8xNzUYmgQs8IEg0tKUyqhHA7X4pLM3MSSVBjfJ788tSje2RPGDy0oQOaz\nF8SXJeaUpqJblJyTWAyzCCbIlZJYkqiXVgR0A5pyzqL8cj2Y23iBmKkBSPz///8XkPoHAJA7\nN6wyAgAA","type":"binary"}]
